Service folder ((import { ApplicationConfig } from '@angular/core'; 
import { provideRouter } from '@angular/router';
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { routes } from '../app.routes';
import { JwtInterceptor } from './jwt.intercreptor';
import { HTTP_INTERCEPTORS } from '@angular/common/http';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(withInterceptorsFromDi()),
    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true }
  ]
}; ) ( import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from './auth.service';

export const AuthGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isAuthenticated()) {
    return true;
  }
  router.navigate(['/login']);
  return false;
}; ) ( import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { JwtHelperService } from '@auth0/angular-jwt';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private apiUrl = 'http://localhost:8090/account';

  constructor(
    private http: HttpClient,
    private router: Router,
    public jwtHelper: JwtHelperService
  ) {}

  login(credentials: { username: string; password: string }) {
    return this.http.post(`${this.apiUrl}/login`, credentials);
  }

  register(userData: any) {
    return this.http.post(`${this.apiUrl}/register`, userData);
  }

  logout() {
    localStorage.removeItem('token');
    this.router.navigate(['/login']);
  }

  isAuthenticated(): boolean {
    const token = localStorage.getItem('token');
    return !!token && !this.jwtHelper.isTokenExpired(token);
  }
  getToken() {
    return localStorage.getItem('token');
  }
} ) ( import { Injectable } from '@angular/core';
import {HttpRequest,HttpHandler,HttpEvent,HttpInterceptor} from
'@angular/common/http';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
    constructor(private authService: AuthService) {}

    intercept(request: HttpRequest<unknown>, next: HttpHandler):
    Observable<HttpEvent<unknown>> {
    const token = this.authService.getToken();
    if (token) {
        request = request.clone({
        setHeaders: {
            Authorization: `Bearer ${token}`
        }
    });
    }
    return next.handle(request);
    }
} ) ( import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, catchError, throwError } from 'rxjs';
import { AuthService } from './auth.service';



@Injectable({ providedIn: 'root' })
export class MovieService {
  private apiUrl = 'http://localhost:8090/api/movies';

  constructor(private http: HttpClient, private authService: AuthService) {}

  // Add proper type interface for movie response
  getTopRated(): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}/top-rated`).pipe(
      catchError(error => {
        console.error('Error fetching top rated:', error);
        return throwError(() => new Error('Failed to load top rated movies'));
      })
    );
  }

  getHybridRecommendations(): Observable<any[]> {
    const token = this.authService.getToken();
    if (!token) throw new Error('No token available');
    
    const decoded = this.authService.jwtHelper.decodeToken(token);
    const userId = decoded?.userId || decoded?.sub; // Handle different JWT claims
    
    if (!userId) throw new Error('User ID not found in token');
    
    return this.http.get<any[]>(`${this.apiUrl}/recommendations/hybrid/${userId}`).pipe(
      catchError(error => {
        console.error('Error fetching hybrid recommendations:', error);
        return throwError(() => new Error('Failed to load recommendations'));
      })
    );
  }

  getAllMovies(page: number = 1, perPage: number = 100): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}?page=${page}&per_page=${perPage}`).pipe(
      catchError(error => {
        console.error('Error fetching all movies:', error);
        return throwError(() => new Error('Failed to load movies'));
      })
    );
  }

  getMovieDetails(movieId: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/${movieId}`).pipe(
      catchError(error => {
        console.error('Error fetching movie details:', error);
        return throwError(() => new Error('Failed to load movie details'));
      })
    );
  }
} ) // app.toutes.ts ( import { Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';
import { RegisterComponent } from './register/register.component';
import { HomeComponent } from './home/home.component';
import { MovieDetailsComponent } from './movie-details/movie-details.component';
import { AuthGuard } from './service/auth.guard';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { 
    path: 'home', 
    component: HomeComponent,
    canActivate: [AuthGuard]
  },
  { 
    path: 'movies/:id',
    component: MovieDetailsComponent,
    canActivate: [AuthGuard]
  },
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: '**', redirectTo: '/home' }
]; )  /// app.config.ts (// src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { routes } from './app.routes';
import { JwtHelperService, JWT_OPTIONS } from '@auth0/angular-jwt';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(withInterceptorsFromDi()),
    { provide: JWT_OPTIONS, useValue: JWT_OPTIONS },
    JwtHelperService
  ]
}; ) // app.component.ts ( import { Component } from '@angular/core';
import { NavbarComponent } from './navbar/navbar.component';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [NavbarComponent, RouterOutlet],
  template: `
    <app-navbar></app-navbar>
    <div class="container mt-4">
      <router-outlet></router-outlet>
    </div>
  `,
  styles: []
})
export class AppComponent {} ) // main.ts ( // src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error(err)); ) // register component ( import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { AuthService } from '../service/auth.service';
import { CommonModule } from '@angular/common'; // Add this

@Component({
  standalone: true,
  imports: [FormsModule, RouterLink , CommonModule],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent {
  userData = {
    firstName: '',
    lastName: '',
    username: '',
    email: '',
    password: '',
    phone: '',
    address: ''
  };
  errorMessage = '';

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit() {
    this.authService.register(this.userData).subscribe({
      next: (response: any) => {
        localStorage.setItem('token', response.token);
        this.router.navigate(['/home']);
      },
      error: (err) => {
        this.errorMessage = err.error || 'Registration failed';
      }
    });
  }
} ) ( <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h4>Register</h4>
          </div>
          <div class="card-body">
            <form (ngSubmit)="onSubmit()">
              <div class="mb-3">
                <label class="form-label">First Name</label>
                <input type="text" class="form-control" [(ngModel)]="userData.firstName" name="firstName" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Last Name</label>
                <input type="text" class="form-control" [(ngModel)]="userData.lastName" name="lastName" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Username</label>
                <input type="text" class="form-control" [(ngModel)]="userData.username" name="username" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" [(ngModel)]="userData.email" name="email" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" class="form-control" [(ngModel)]="userData.password" name="password" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Phone</label>
                <input type="tel" class="form-control" [(ngModel)]="userData.phone" name="phone">
              </div>
              <div class="mb-3">
                <label class="form-label">Address</label>
                <input type="text" class="form-control" [(ngModel)]="userData.address" name="address">
              </div>
              <button type="submit" class="btn btn-primary">Register</button>
              <a routerLink="/login" class="ms-3">Already have an account?</a>
            </form>
            <div *ngIf="errorMessage" class="alert alert-danger mt-3">{{ errorMessage }}</div>
          </div>
        </div>
      </div>
    </div>
  </div> ) //  loging component ( import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { AuthService } from '../service/auth.service';
import { CommonModule } from '@angular/common'; 

@Component({
  standalone: true,
  imports: [FormsModule, RouterLink , CommonModule ],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  credentials = { username: '', password: '' };
  errorMessage = '';

  constructor(private authService: AuthService, private router: Router) {}

  onSubmit() {
    this.authService.login(this.credentials).subscribe({
      next: (response: any) => {
        localStorage.setItem('token', response.token);
        this.router.navigate(['/home']);
      },
      error: (err) => {
        this.errorMessage = 'Invalid username or password';
      }
    });
  }
} ) ( <div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h4>Login</h4>
        </div>
        <div class="card-body">
          <form (ngSubmit)="onSubmit()">
            <div class="mb-3">
              <label class="form-label">Username</label>
              <input type="text" class="form-control" [(ngModel)]="credentials.username" name="username" required>
            </div>
            <div class="mb-3">
              <label class="form-label">Password</label>
              <input type="password" class="form-control" [(ngModel)]="credentials.password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
            <a routerLink="/register" class="ms-3">Create Account</a>
          </form>
          <div *ngIf="errorMessage" class="alert alert-danger mt-3">{{ errorMessage }}</div>
        </div>
      </div>
    </div>
  </div>
</div> )// navbar component ( import { Component } from '@angular/core';
import { AuthService } from '../service/auth.service';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-navbar',
  standalone: true,
  imports: [CommonModule],
  template: `
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" routerLink="/home">MyMovie</a>
        <button 
          *ngIf="authService.isAuthenticated()"
          class="btn btn-danger"
          (click)="logout()"
        >
          Logout
        </button>
      </div>
    </nav>
  `
})
export class NavbarComponent {
  constructor(
    public authService: AuthService,
    private router: Router
  ) {}

  logout() {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
} ) / model folder ( movie.models.ts (export interface Movie {
    id: number;
    title: string;
    genres: string[];
    poster_path: string;
    avg_rating?: number;
    num_ratings?: number;
  }
  
  export interface MovieDetailsResponse {
    movie: Movie;
    recommendations: Movie[];
  } )  //  Home component ( import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { MovieService } from '../service/movie.service';

@Component({
  standalone: true,
  imports: [CommonModule, FormsModule, NavbarComponent],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  searchTerm = '';
  topRatedMovies: any[] = [];
  hybridRecommendations: any[] = [];
  allMovies: any[] = [];

  loading = {
    topRated: true,
    hybrid: true,
    allMovies: true
  };

  errors = {
    topRated: '',
    hybrid: '',
    allMovies: ''
  };

  constructor(
    private movieService: MovieService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadInitialData();
  }

  private loadInitialData(): void {
    this.loadTopRated();
    this.loadHybridRecommendations();
    this.loadAllMovies();
  }

  private loadTopRated(): void {
    this.movieService.getTopRated().subscribe({
      next: (movies) => {
        this.topRatedMovies = this.transformMovieData(movies);
        this.loading.topRated = false;
      },
      error: (err) => {
        this.handleError('topRated', 'Failed to load top rated movies');
      }
    });
  }

  private loadHybridRecommendations(): void {
    this.movieService.getHybridRecommendations().subscribe({
      next: (movies) => {
        this.hybridRecommendations = this.transformMovieData(movies);
        this.loading.hybrid = false;
      },
      error: (err) => {
        this.handleError('hybrid', 'Failed to load recommendations');
      }
    });
  }

  private loadAllMovies(): void {
    this.movieService.getAllMovies().subscribe({
      next: (response) => {
        this.allMovies = this.transformMovieData(response.results);
        this.loading.allMovies = false;
      },
      error: (err) => {
        this.handleError('allMovies', 'Failed to load movies');
      }
    });
  }

  private transformMovieData(movies: any[]): any[] {
    return movies.map(movie => ({
      movieId: movie.movieId || movie.id,
      title: movie.title,
      genres: movie.genres || [],
      poster_path: movie.poster_path || 'assets/no-image.jpg',
      avg_rating: movie.avg_rating || 0,
      num_ratings: movie.num_ratings || 0
    }));
  }

  private handleError(section: keyof typeof this.errors, message: string): void {
    this.errors[section] = message;
    this.loading[section] = false;
    console.error(message);
  }

  viewMovieDetails(movieId: number): void {
    this.router.navigate(['/movies', movieId]);
  }

  searchMovies(): void {
    console.log('Search initiated for:', this.searchTerm);
    // Implement search functionality
  }
} ) ( <div class="container mt-4">
  <h2>Welcome to MyMovie!</h2>
  
  <!-- Search Bar -->
  <div class="mb-4">
    <div class="input-group">
      <input 
        type="text" 
        class="form-control" 
        placeholder="Search movies..."
        [(ngModel)]="searchTerm"
        (keyup.enter)="searchMovies()"
      >
      <button class="btn btn-primary" type="button" (click)="searchMovies()">
        <i class="bi bi-search"></i>
      </button>
    </div>
  </div>

  <!-- Top Rated Movies -->
  <div class="mb-5">
    <h4>Top Rated Movies</h4>
    <div *ngIf="loading.topRated" class="text-center my-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
    
    <div *ngIf="errors.topRated" class="alert alert-danger">
      {{ errors.topRated }}
    </div>

    <div class="scrolling-wrapper" *ngIf="!loading.topRated && topRatedMovies.length > 0">
      <div *ngFor="let movie of topRatedMovies" class="movie-card" (click)="viewMovieDetails(movie.movieId)">
        <img [src]="movie.poster_path" alt="{{ movie.title }} poster" class="movie-poster">
        <div class="card-body">
          <h5 class="movie-title">{{ movie.title }}</h5>
          <div class="movie-info">
            <span class="rating-badge">★ {{ movie.avg_rating | number:'1.1-1' }}</span>
            <span class="votes">({{ movie.num_ratings }} votes)</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Hybrid Recommendations -->
  <div class="mb-5">
    <h4>Recommended For You</h4>
    <div *ngIf="loading.hybrid" class="text-center my-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
    
    <div *ngIf="errors.hybrid" class="alert alert-danger">
      {{ errors.hybrid }}
    </div>

    <div class="scrolling-wrapper" *ngIf="!loading.hybrid && hybridRecommendations.length > 0">
      <div *ngFor="let movie of hybridRecommendations" class="movie-card" (click)="viewMovieDetails(movie.movieId)">
        <img [src]="movie.poster_path" alt="{{ movie.title }} poster" class="movie-poster">
        <div class="card-body">
          <h5 class="movie-title">{{ movie.title }}</h5>
          <div class="movie-info">
            <span class="rating-badge">★ {{ movie.avg_rating | number:'1.1-1' }}</span>
            <span class="votes">({{ movie.num_ratings }} votes)</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- All Movies -->
  <div class="mb-5">
    <h4>All Movies</h4>
    <div *ngIf="loading.allMovies" class="text-center my-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
    
    <div *ngIf="errors.allMovies" class="alert alert-danger">
      {{ errors.allMovies }}
    </div>

    <div class="vertical-scroll" *ngIf="!loading.allMovies && allMovies.length > 0">
      <div class="row">
        <div *ngFor="let movie of allMovies" class="col-md-3 mb-4">
          <div class="movie-card" (click)="viewMovieDetails(movie.movieId)">
            <img [src]="movie.poster_path" alt="{{ movie.title }} poster" class="movie-poster">
            <div class="card-body">
              <h5 class="movie-title">{{ movie.title }}</h5>
              <div class="movie-info">
                <span class="rating-badge">★ {{ movie.avg_rating | number:'1.1-1' }}</span>
                <span class="votes">({{ movie.num_ratings }} votes)</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div> ) // Movie details component ( import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { NavbarComponent } from '../navbar/navbar.component';
import { MovieService } from '../service/movie.service';

@Component({
  standalone: true,
  imports: [CommonModule, NavbarComponent],
  templateUrl: './movie-details.component.html',
  styleUrls: ['./movie-details.component.css']
})
export class MovieDetailsComponent implements OnInit {
  movie: any;
  recommendations: any[] = [];
  loading = true;
  error = '';

  constructor(
    private route: ActivatedRoute,
    private movieService: MovieService
  ) {}

  ngOnInit(): void {
    const movieId = this.route.snapshot.paramMap.get('id');
    if (movieId) {
      this.loadMovieDetails(+movieId);
    } else {
      this.handleError('Invalid movie ID');
    }
  }

  private loadMovieDetails(movieId: number): void {
    this.movieService.getMovieDetails(movieId).subscribe({
      next: (response) => {
        this.movie = response.movie;
        this.recommendations = response.recommendations || [];
        this.loading = false;
      },
      error: (err) => {
        this.handleError('Failed to load movie details');
      }
    });
  }

  private handleError(message: string): void {
    this.error = message;
    this.loading = false;
    console.error(message);
  }
} ) ( <div class="container mt-4">
    <div *ngIf="loading" class="text-center my-5">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  
    <div *ngIf="error" class="alert alert-danger">
      {{ error }}
    </div>
  
    <div *ngIf="movie && !loading">
      <div class="row">
        <div class="col-md-4">
          <img [src]="movie.poster_path" alt="{{ movie.title }} poster" class="img-fluid rounded">
        </div>
        <div class="col-md-8">
          <h1>{{ movie.title }}</h1>
          <div class="badge bg-warning text-dark me-2">
            ★ {{ movie.avg_rating | number:'1.1-1' }}
          </div>
          <span class="text-muted">{{ movie.num_ratings }} ratings</span>
          
          <div class="mt-3">
            <h4>Genres</h4>
            <div class="d-flex flex-wrap gap-2">
              <span *ngFor="let genre of movie.genres" class="badge bg-primary">
                {{ genre }}
              </span>
            </div>
          </div>
        </div>
      </div>
  
      <div class="mt-5" *ngIf="recommendations.length > 0">
        <h3>Recommended Movies</h3>
        <div class="scrolling-wrapper">
          <div *ngFor="let movie of recommendations" class="movie-card">
            <img [src]="movie.poster_path" alt="{{ movie.title }} poster" class="movie-poster">
            <div class="card-body">
              <h5 class="movie-title">{{ movie.title }}</h5>
              <div class="movie-info">
                <span class="rating-badge">★ {{ movie.avg_rating | number:'1.1-1' }}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div> ) 