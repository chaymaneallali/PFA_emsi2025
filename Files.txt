still thhe same problems ( i alraedy have Machine Learnig python files work) , ( Backed work with all api response work ) authentification Jwt is work , but when i login and in the home i have tis ( MyMovie
Welcome to MyMovie!
Search movies...
Top Rated Movies
Failed to load top rated movies
Recommended For You
Failed to load recommendations
All Movies
Failed to load movies ) im working with a Database in PostgreSql have the table Movies ( all movies with the poster_path is inserted , ratings , tags ) but in the home of frontend i cant find any movies ( i want movies like cards ( the first list of Top Rated(list of 5 movies and any movie with his button to see details ) and a butto of all the list for see details redirect you to a other page of all ( To-rated ) , the same for the Recommendation for you , and in th bothom of this 2 list a list with a pagintion of all movies i have in database and when the user select a movie on clicked on the button see details he will see the the details of the movie with a list in the bothom have all movies recommended based on content ( this is my project spring boot (package com.MyMovie.MyMovie.config;



import com.MyMovie.MyMovie.service.AppUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;

@Configuration
@EnableWebSecurity
public class SecurityConfig {


    @Autowired
    private AppUserService appUserService;


    @Value("${security.jwt.secret}")
    private String jwtSecretKey;


    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth->auth
                        .requestMatchers("/").permitAll()
                        .requestMatchers("/store/**").permitAll()
                        .requestMatchers("/account").permitAll()
                        .requestMatchers("/account/login").permitAll()
                        .requestMatchers("/account/register").permitAll()
                        .anyRequest().authenticated()
                )
                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()))
                .sessionManagement(session -> session.sessionCreationPolicy(
                        SessionCreationPolicy.STATELESS))
                //add this line to enable cors mean while developing the app

                .cors(cors -> cors.configurationSource(corsConfigurationSource()))

                .build();

        //http.cors(cors -> cors.configurationSource(corsConfigurationSource()));
    }


    @Bean
    public JwtDecoder jwtDecoder() {
        var secretKey = new SecretKeySpec(jwtSecretKey.getBytes(), "");
        return NimbusJwtDecoder.withSecretKey(secretKey)
                .macAlgorithm(MacAlgorithm.HS256).build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AppUserService appUserService){
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(appUserService);
        provider.setPasswordEncoder(new BCryptPasswordEncoder());

        return new ProviderManager(provider);
    }


    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(Arrays.asList(
                "http://localhost:4200",
                "http://127.0.0.1:4200"
        ));
        config.setAllowedMethods(Arrays.asList("*"));
        config.setAllowedHeaders(Arrays.asList("*"));
        config.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}
 ) ( package com.MyMovie.MyMovie.dao.dto;


import jakarta.validation.constraints.NotEmpty;
import lombok.Getter;
import lombok.Setter;


@Getter @Setter
public class LoginDto {

    @NotEmpty
    private String username;

    @NotEmpty
    private String password;
}
 ) ( package com.MyMovie.MyMovie.dao.dto;

import lombok.Data;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Data
public class MovieDetailResponse {
    private MovieDTO movie;
    private List<MovieDTO> recommendations;
} ) ( package com.MyMovie.MyMovie.dao.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data @NoArgsConstructor

public class MovieDTO {
    @JsonProperty("movieId")
    private Integer movieId;

    private String title;

    @JsonProperty("genres")
    private List<String> genres;

    @JsonProperty("poster_path")
    private String posterPath;


    @JsonProperty("avg_rating")
    private Double avgRating;

    @JsonProperty("num_ratings")
    private Integer numRatings;

}
 ) ( package com.MyMovie.MyMovie.dao.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PagedMoviesResponse {
    private int page;
    private int perPage;
    private int totalMovies;
    private List<MovieDTO> results;  // Changed from List<Object>

    // Add empty results constructor
    public PagedMoviesResponse(int page, int perPage, int totalMovies) {
        this.page = page;
        this.perPage = perPage;
        this.totalMovies = totalMovies;
        this.results = List.of();
    }
} ) ( package com.MyMovie.MyMovie.dao.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RecommendationResponse {
    private String message;
    private List<MovieDTO> recommendations;
} ) ( package com.MyMovie.MyMovie.dao.dto;




import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;


@Getter @Setter
public class RegisterDto {

    @NotEmpty
    private String firstName;
    @NotEmpty
    private String lastName;
    @NotEmpty
    private String username;
    @NotEmpty
    private String email;
    @NotEmpty
    @Size(min = 6, message = "Password must be at least 6 characters long")
    private String password;


    private String phone;

    private String address;
}
 ) ( package com.MyMovie.MyMovie.dao.embeddable;


import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

@Embeddable
@AllArgsConstructor @NoArgsConstructor
@Getter
@Setter
@EqualsAndHashCode
public class RatingId implements Serializable {
    @Column(name = "user_id")
    private Integer userId;

    @Column(name = "movie_id")
    private Integer movieId;

} ) ( package com.MyMovie.MyMovie.dao.embeddable;


import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import lombok.*;

@Embeddable
@AllArgsConstructor @NoArgsConstructor
@Getter
@Setter
@EqualsAndHashCode
public class TagId implements Serializable {
    @Column(name = "user_id")
    private Integer userId;

    @Column(name = "movie_id")
    private Integer movieId;

    private String tag;

} ) ( package com.MyMovie.MyMovie.dao.entities;


import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;

@Entity
@Getter  @Setter
@NoArgsConstructor @AllArgsConstructor
@Table(name = "users")
public class AppUser {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String firstName;
    private String lastName;

    @Column(unique = true)
    private String username;

    @Column(unique = true)
    private String email ;

    private String phone ;
    private String address ;
    private String password ;
    private String role ;

    private Date createdAt;
}
) ( package com.MyMovie.MyMovie.dao.entities;


import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


@Entity
@Table(name = "movies")
@AllArgsConstructor @NoArgsConstructor
@Getter
@Setter
public class Movie {
    @Id
    @Column(name = "movie_id")
    private Integer movieId;

    private String title;

    @Column(length = 2048)
    private String genres;

    @Column(name = "poster_path")
    private String posterPath;


} ) ( package com.MyMovie.MyMovie.dao.entities;


import com.MyMovie.MyMovie.dao.embeddable.RatingId;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Entity
@Table(name = "ratings")
@AllArgsConstructor @NoArgsConstructor @Getter
@Setter
public class Rating {
    @EmbeddedId
    private RatingId id;

    private Double rating;

    @Column(name = "\"timestamp\"") // timestamp is a reserved word in SQL
    private LocalDateTime timestamp;



}
 ) ( package com.MyMovie.MyMovie.dao.entities;


import com.MyMovie.MyMovie.dao.embeddable.TagId;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Entity
@Table(name = "tags")
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class Tag {
    @EmbeddedId
    private TagId id;

    @Column(name = "\"timestamp\"")
    private LocalDateTime timestamp;


} ) ( package com.MyMovie.MyMovie.dao.repository;



import com.MyMovie.MyMovie.dao.entities.AppUser;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AppUserRepository extends JpaRepository<AppUser, Integer> {
    public AppUser findByUsername(String username);
    public AppUser findByEmail(String email);
} ) ( package com.MyMovie.MyMovie.dao.repository;


import com.MyMovie.MyMovie.dao.entities.Movie;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface MovieRepository extends JpaRepository<Movie, Integer> {
    List<Movie> findByTitleContainingIgnoreCase(String title);
}
 ) ( package com.MyMovie.MyMovie.dao.repository;

import com.MyMovie.MyMovie.dao.embeddable.RatingId;
import com.MyMovie.MyMovie.dao.entities.Rating;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface RatingRepository extends JpaRepository<Rating, RatingId> {
    List<Rating> findById_UserId(Integer userId);
    List<Rating> findById_MovieId(Integer movieId);
}
)  ( package com.MyMovie.MyMovie.dao.repository;


import com.MyMovie.MyMovie.dao.embeddable.TagId;
import com.MyMovie.MyMovie.dao.entities.Tag;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface TagRepository extends JpaRepository<Tag, TagId> {
    List<Tag> findById_MovieId(Integer movieId);
    List<Tag> findById_UserId(Integer userId);
}
 ) ( package com.MyMovie.MyMovie.service;


import com.MyMovie.MyMovie.dao.entities.AppUser;
import com.MyMovie.MyMovie.dao.repository.AppUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class AppUserService implements UserDetailsService {

    @Autowired
    private AppUserRepository appUserRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        AppUser appUser = appUserRepository.findByUsername(username);
        if (appUser != null) {
            var springUser = User.withUsername(appUser.getUsername())
                    .password(appUser.getPassword())
                    .roles(appUser.getRole())
                    .build();
            return springUser;
        }

        return null;
    }
}
 ) ( package com.MyMovie.MyMovie.service;


import com.MyMovie.MyMovie.dao.entities.Movie;
import com.MyMovie.MyMovie.dao.repository.MovieRepository;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class MovieService {
    private final MovieRepository movieRepository;

    public MovieService(MovieRepository movieRepository) {
        this.movieRepository = movieRepository;
    }

    public List<Movie> getAllMovies() {
        return movieRepository.findAll();
    }

    public Movie getMovieById(Integer movieId) {
        return movieRepository.findById(movieId).orElse(null);
    }

    public List<Movie> searchMovies(String query) {
        return movieRepository.findByTitleContainingIgnoreCase(query);
    }
} ) ( package com.MyMovie.MyMovie.service;


import com.MyMovie.MyMovie.dao.entities.Rating;
import com.MyMovie.MyMovie.dao.repository.RatingRepository;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class RatingService {
    private final RatingRepository ratingRepository;

    public RatingService(RatingRepository ratingRepository) {
        this.ratingRepository = ratingRepository;
    }

    public List<Rating> getRatingsByUser(Integer userId) {
        return ratingRepository.findById_UserId(userId);
    }

    public List<Rating> getRatingsForMovie(Integer movieId) {
        return ratingRepository.findById_MovieId(movieId);
    }

    public Rating saveRating(Rating rating) {
        return ratingRepository.save(rating);
    }
}
) ( package com.MyMovie.MyMovie.service;


import com.MyMovie.MyMovie.dao.dto.MovieDTO;
import com.MyMovie.MyMovie.dao.dto.MovieDetailResponse;
import com.MyMovie.MyMovie.dao.dto.PagedMoviesResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.List;

@Service
public class RecommendationService {
    private final RestTemplate restTemplate;
    private final String flaskBaseUrl;

    public RecommendationService(RestTemplateBuilder restTemplateBuilder,
                                 @Value("${flask.api.base-url}") String flaskBaseUrl) {
        this.restTemplate = restTemplateBuilder.build();
        this.flaskBaseUrl = flaskBaseUrl;
    }

    public List<MovieDTO> getHybridRecommendations(int userId, int topN) {
        String url = String.format("%s/api/recommendations/hybrid/%d?top_n=%d",
                flaskBaseUrl, userId, topN);
        return Arrays.asList(restTemplate.getForObject(url, MovieDTO[].class));
    }

    public List<MovieDTO> getTopRated(int minRatings) {
        String url = String.format("%s/api/recommendations/top-rated?min_ratings=%d",
                flaskBaseUrl, minRatings);
        return Arrays.asList(restTemplate.getForObject(url, MovieDTO[].class));
    }

    public MovieDetailResponse getMovieDetails(int movieId) {
        String url = String.format("%s/api/movies/%d", flaskBaseUrl, movieId);
        return restTemplate.getForObject(url, MovieDetailResponse.class);
    }

    public PagedMoviesResponse getAllMovies(int page, int perPage) {
        String url = String.format("%s/api/movies?page=%d&per_page=%d",
                flaskBaseUrl, page, perPage);
        return restTemplate.getForObject(url, PagedMoviesResponse.class);
    }


} ) ( package com.MyMovie.MyMovie.service;


import com.MyMovie.MyMovie.dao.entities.Tag;
import com.MyMovie.MyMovie.dao.repository.TagRepository;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class TagService {
    private final TagRepository tagRepository;

    public TagService(TagRepository tagRepository) {
        this.tagRepository = tagRepository;
    }

    public List<Tag> getTagsForMovie(Integer movieId) {
        return tagRepository.findById_MovieId(movieId);
    }

    public List<Tag> getTagsByUser(Integer userId) {
        return tagRepository.findById_UserId(userId);
    }

    public Tag saveTag(Tag tag) {
        return tagRepository.save(tag);
    }
}
 ) ( package com.MyMovie.MyMovie.web;


import com.MyMovie.MyMovie.dao.entities.AppUser;
import com.MyMovie.MyMovie.dao.dto.LoginDto;
import com.MyMovie.MyMovie.dao.dto.RegisterDto;
import com.MyMovie.MyMovie.dao.repository.AppUserRepository;
import com.nimbusds.jose.jwk.source.ImmutableSecret;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.JwsHeader;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/account")
public class AccountController {

    @Autowired
    private AuthenticationManager authenticationManager; //exist in securityconfig

    private final AppUserRepository appUserRepository;

    @Value("${security.jwt.secret}")
    private String jwtSecretKey;

    @Value("${security.jwt.issuer}")
    private String jwtIssuer;

    public AccountController(AppUserRepository appUserRepository) {
        this.appUserRepository = appUserRepository;
    }

    // Method to create a JWT token for the user
    private String createJwtToken(AppUser appUser) {
        Instant now = Instant.now();

        JwtClaimsSet claims = JwtClaimsSet.builder()
                .issuer(jwtIssuer)
                .issuedAt(now)
                .expiresAt(now.plusSeconds(24 * 3600))
                .subject(appUser.getUsername())
                .claim("role", appUser.getRole())
                .build();

        var encoder = new NimbusJwtEncoder(new ImmutableSecret<>(jwtSecretKey.getBytes()));
        var params = JwtEncoderParameters.from(JwsHeader.with(MacAlgorithm.HS256).build(), claims);
        return encoder.encode(params).getTokenValue();
    }

    @PostMapping("/register")
    public ResponseEntity<Object> register(
            @Valid @RequestBody RegisterDto registerDto,
            BindingResult result) {

        // If validation errors exist, return them
        if (result.hasErrors()) {
            Map<String, String> errorsMap = new HashMap<>();
            for (FieldError error : result.getFieldErrors()) {
                errorsMap.put(error.getField(), error.getDefaultMessage());
            }
            return ResponseEntity.badRequest().body(errorsMap);
        }

        var bCryptEncoder = new BCryptPasswordEncoder();

        // Create and populate AppUser
        AppUser appUser = new AppUser();
        appUser.setFirstName(registerDto.getFirstName());
        appUser.setLastName(registerDto.getLastName());
        appUser.setEmail(registerDto.getEmail());
        appUser.setUsername(registerDto.getUsername());
        appUser.setRole("USER"); // Default role
        appUser.setCreatedAt(new Date());
        appUser.setPassword(bCryptEncoder.encode(registerDto.getPassword()));
        appUser.setPhone(registerDto.getPhone());
        appUser.setAddress(registerDto.getAddress());

        try {
            // Check for duplicate username
            AppUser otherUser = appUserRepository.findByUsername(registerDto.getUsername());
            if (otherUser != null) {
                return ResponseEntity.badRequest().body("Username already exists");
            }
            // Check for duplicate email
            otherUser = appUserRepository.findByEmail(registerDto.getEmail());
            if (otherUser != null) {
                return ResponseEntity.badRequest().body("Email already exists");
            }
            // Save the new user
            appUserRepository.save(appUser);
            // Generate JWT token for the new user
            String token = createJwtToken(appUser);
            // Build response map with user details and token (excluding password)
            Map<String, Object> responseMap = new HashMap<>();
            responseMap.put("firstName", appUser.getFirstName());
            responseMap.put("lastName", appUser.getLastName());
            responseMap.put("username", appUser.getUsername());
            responseMap.put("email", appUser.getEmail());
            responseMap.put("phone", appUser.getPhone());
            responseMap.put("address", appUser.getAddress());
            responseMap.put("role", appUser.getRole());
            responseMap.put("token", token);

            return ResponseEntity.ok(responseMap);
        } catch (Exception ex) {
            ex.printStackTrace();
            return ResponseEntity.badRequest().body("An error occurred during registration: " + ex.getMessage());
        }
    }



    @PostMapping("/login")
    public ResponseEntity<Object> login(
            @Valid @RequestBody LoginDto loginDto
            , BindingResult result
    ){
        if(result.hasErrors()){
            var errorList = result.getAllErrors();
            var errorsMap = new HashMap<String , String>();

            for (int i=0; i< errorList.size(); i++) {
                var error = (FieldError) errorList.get(i);
                errorsMap.put(error.getField(), error.getDefaultMessage());
            }
            return ResponseEntity.badRequest().body(errorsMap);
        }
        try{
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            loginDto.getUsername() ,
                            loginDto.getPassword()
                    )
            );

            AppUser appUser = appUserRepository.findByUsername(loginDto.getUsername());
            String jwtToken = createJwtToken(appUser); //Create The token for the user

            var response = new HashMap<String, Object>();
            response.put("token", jwtToken);
            response.put("user",appUser);

            return ResponseEntity.ok(response);
        }
        catch (Exception ex){
            System.out.println("There is an Exception : ");
            ex.printStackTrace();
        }
        return ResponseEntity.badRequest().body("Bad Username Or Password");
    }


    //AUTHENTICATE USER BY TOKEN
    @GetMapping("/profile")
    public ResponseEntity<Object> profile(Authentication auth){
        var response = new HashMap<String , Object>();
        response.put("Username",auth.getName());
        response.put("Authorities",auth.getAuthorities());

        var appUser = appUserRepository.findByUsername(auth.getName());
        response.put("User",appUser);

        return ResponseEntity.ok(response);
    }
}

 ) ( package com.MyMovie.MyMovie.web;



import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeController {
    @GetMapping("/")
    public String home() {
        return "Home Page";

    }

    

    @GetMapping("/admin/home")
    public String getAdminHome() {
        return "Admin Home Page";
    }

    @GetMapping("/client/home")
    public String getClientHome() {
        return "Client Home Page";
    }
}
 ) (// MovieController.java (updated)
package com.MyMovie.MyMovie.web;

import com.MyMovie.MyMovie.dao.dto.MovieDTO;
import com.MyMovie.MyMovie.dao.dto.MovieDetailResponse;
import com.MyMovie.MyMovie.dao.dto.PagedMoviesResponse;
import com.MyMovie.MyMovie.dao.dto.RecommendationResponse;
import com.MyMovie.MyMovie.service.RecommendationService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.HttpClientErrorException;

import java.util.List;
import java.util.Map;
@RestController
@RequestMapping("/api/movies")
public class MovieController {

    private final RecommendationService recommendationService;

    public MovieController(RecommendationService recommendationService) {
        this.recommendationService = recommendationService;
    }

    @GetMapping("/recommendations/hybrid/{userId}")
    public ResponseEntity<?> getHybridRecommendations(
            @PathVariable int userId,
            @RequestParam(defaultValue = "10") int top_n) {
        try {
            return ResponseEntity.ok(recommendationService.getHybridRecommendations(userId, top_n));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Recommendation failed", "detail", e.getMessage()));
        }
    }

    @GetMapping("/top-rated")
    public List<MovieDTO> getTopRated(@RequestParam(defaultValue = "100") int minRatings) {
        return recommendationService.getTopRated(minRatings);
    }

    @GetMapping("/{movieId}")
    public ResponseEntity<?> getMovieDetailsWithRecommendations(@PathVariable int movieId) {
        try {
            MovieDetailResponse response = recommendationService.getMovieDetails(movieId);
            return ResponseEntity.ok(response);
        } catch (HttpClientErrorException.NotFound ex) {
            return ResponseEntity.notFound().build();
        } catch (Exception ex) {
            return ResponseEntity.internalServerError()
                    .body(Map.of("error", "Failed to fetch movie details"));
        }
    }
    @GetMapping
    public PagedMoviesResponse getAllMovies(
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "100") int perPage) {
        return recommendationService.getAllMovies(page, perPage);
    }
} ) ( spring.application.name=MyMovie


# PostgreSQL DB connection
spring.datasource.url=jdbc:postgresql://localhost:5432/Mymovie
spring.datasource.username=postgres
spring.datasource.password=Wben2003
spring.datasource.driver-class-name=org.postgresql.Driver



# Hibernate settings for PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true




server.port=8090


security.jwt.secret=bB19dQfnxGDprVxZU9iOAFN4wC0OZwu+NV6qU88fWOo=
security.jwt.issuer=inventory-service
# Flask API Configuration
# Flask API Configuration
flask.api.base-url=http://localhost:5000
spring.mvc.async.request-timeout=30000

# Add connection pool settings
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10 ) 




////// RECOMMENDATIONSERVICE //AccController ( claims) 

from flask import Flask, jsonify, request
from flask_cors import CORS
import pandas as pd
import pickle
import sys
from pathlib import Path




# Add root directory to Python path
sys.path.append(str(Path(__file__).parent.parent))
# Replace relative imports
from model.data_processing import load_and_clean_data, fetch_posters
from model.recommendation_engine import RecommendationEngine
import logging

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for Spring Boot calls

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global engine instance
engine = None

def initialize_api():
    global engine
    try:
        movies_data = load_and_clean_data()
        ratings_df = pd.read_csv("data/ratings.csv")
        
        if ratings_df.empty or movies_data.empty:
            raise ValueError("Movies or ratings data is empty!")
        
        movies_data = fetch_posters(movies_data)
        
        engine = RecommendationEngine(movies_data, ratings_df)
        
        model_path = str(Path(__file__).parent.parent / "model/recommendation_models.pkl")
        engine.load_models(model_path)
        
        logger.info("API initialization completed successfully")
    except Exception as e:
        logger.error(f"Initialization failed: {str(e)}")
        raise

@app.route('/api/health')
def health_check():
    return jsonify({"status": "healthy", "model_loaded": engine is not None})

@app.route('/api/recommendations/top-rated', methods=['GET'])
def get_top_rated():
    try:
        min_ratings = request.args.get('min_ratings', default=100, type=int)
        results = engine.get_top_rated_movies(min_ratings)
        return jsonify(results.to_dict(orient='records'))
    except Exception as e:
        logger.error(f"Top rated error: {str(e)}", exc_info=True)  # Add exc_info
        return jsonify({"error": "Recommendation failed", "detail": str(e)}), 500

@app.route('/api/recommendations/hybrid/<int:user_id>', methods=['GET'])
def get_hybrid_recommendations(user_id):
    try:
        top_n = request.args.get('top_n', default=10, type=int)
        results = engine.get_hybrid_recommendations(user_id, top_n)
        
        # Convert NaN and handle genres
        results = results.where(pd.notnull(results), None)
        results['genres'] = results['genres'].apply(
            lambda x: x if isinstance(x, list) else []
        )
        
        return jsonify(results.to_dict(orient='records'))
    
    except Exception as e:
        logger.error(f"Hybrid error: {str(e)}", exc_info=True)
        return jsonify({
            "error": "Recommendation failed",
            "detail": "Using fallback recommendations",
            "fallback": engine.get_top_rated_movies(10).head(5).to_dict(orient='records')
        }), 200

@app.route('/api/recommendations/collaborative/<int:user_id>', methods=['GET'])
def get_collaborative_recommendations(user_id):
    try:
        top_n = request.args.get('top_n', default=10, type=int)
        results = engine.get_collaborative_recommendations(user_id, top_n)
        return jsonify(results.to_dict(orient='records'))
    except Exception as e:
        logger.error(f"Collaborative error for user {user_id}: {str(e)}")
        return jsonify({"error": "Recommendation failed"}), 500

@app.route('/api/movies/<int:movie_id>', methods=['GET'])
def get_movie_details(movie_id):
    try:
        # Convert to string for comparison if needed
        movie = engine.movies_data[engine.movies_data['movieId'].astype(int) == movie_id]
        
        if movie.empty:
            return jsonify({"error": f"Movie {movie_id} not found"}), 404
            
        recommendations = engine.get_content_recommendations(movie_id)
        
        return jsonify({
            "movie": movie.iloc[0].to_dict(),
            "recommendations": recommendations.to_dict(orient='records')
        })
    except Exception as e:
        logger.error(f"Movie details error for {movie_id}: {str(e)}", exc_info=True)
        return jsonify({"error": "Movie lookup failed", "detail": str(e)}), 500

@app.route('/api/movies', methods=['GET'])
def get_all_movies():
    try:
        page = request.args.get('page', default=1, type=int)
        per_page = request.args.get('per_page', default=100, type=int)
        
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        
        results = engine.movies_data.iloc[start_idx:end_idx]
        return jsonify({
            "page": page,
            "per_page": per_page,
            "total_movies": len(engine.movies_data),
            "results": results.to_dict(orient='records')
        })
    except Exception as e:
        logger.error(f"Movies list error: {str(e)}")
        return jsonify({"error": "Movie list failed"}), 500

    
if __name__ == '__main__':
    initialize_api()
    app.run(host='0.0.0.0', port=5000, threaded=True)
